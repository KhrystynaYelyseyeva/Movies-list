{"version":3,"sources":["components/MovieItem.js","components/MovieTabs.js","utils/api.js","components/App.js","serviceWorker.js","index.js"],"names":["MovieItem","state","wish","show","showOverview","setState","prevState","props","this","src","title","vote_average","overview","addMovieWish","deleteMovieFromWish","deleteMovie","movie","className","alt","onClick","bind","Component","MovieTabs","sort_by","updatePage","API_URL","API_KEY","App","movies","willWatch","getMovies","fetch","then","data","json","results","filter","item","id","value","prevProps","snapshot","map","key","poster_path","backdrop_path","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.071a98f5.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nclass MovieItem extends Component {\r\n    state = {\r\n            wish: false,\r\n            show: false,\r\n        };\r\n\r\n\r\n\r\n    showOverview = () => {\r\n        this.setState((prevState, props) => {\r\n            return {show: !prevState.show}\r\n        });\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        const {show, wish} = this.state;\r\n        const {\r\n            src,\r\n            title,\r\n            vote_average,\r\n            overview,\r\n            addMovieWish,\r\n            deleteMovieFromWish,\r\n            deleteMovie,\r\n            movie\r\n        } = this.props;\r\n        return (\r\n            <div className=\"MovieItem card\">\r\n                <img className=\"card-img-top\" src={`https://image.tmdb.org/t/p/w500${src}`} alt={title}/>\r\n                <div className=\"card-body\">\r\n                    <h2 className=\"card-title\">{title}</h2>\r\n                    <button className=\"btn btn-info\"\r\n                            onClick={this.showOverview}>{show ? 'Close' : 'Read more...'}\r\n                    </button>\r\n                    {show && <p>{overview}</p>}\r\n                    <div className=\"d-flex justify-content-between align-items-center\">\r\n                        <p className=\"mb-0\">Rating: {vote_average}</p>\r\n                        {wish ? <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={()=>{\r\n                                this.setState({\r\n                                    wish: false,\r\n                                });\r\n                            deleteMovieFromWish(movie);\r\n                            }}>\r\n                            Delete Wish\r\n                        </button>:\r\n                        <button\r\n                            className=\"btn btn-secondary\"\r\n                            onClick={()=>{\r\n                                this.setState({\r\n                                    wish: true,\r\n                                });\r\n                                addMovieWish(movie);}}>\r\n                           Wish\r\n                        </button>}\r\n                    </div>\r\n                    <button className=\"btn btn-danger\"\r\n                            onClick={deleteMovie.bind(null, movie)}>Delete movie\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default MovieItem;","import React from \"react\";\r\n\r\nconst MovieTabs = ({\r\n                       sort_by,\r\n                       updatePage\r\n                   }) => {\r\n    return (<ul className=\"tabs nav nav-pills\">\r\n        <li className=\"nav-item\">\r\n            <div onClick={() => updatePage(\"popular.desc\")}\r\n                 className={`nav-link ${sort_by === \"popular.desc\" && \"active\"}`}>\r\n                Popular\r\n            </div>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n            <div onClick={() => updatePage(\"revenue.desc\")}\r\n                 className={`nav-link ${sort_by === \"revenue.desc\" && \"active\"}`}>\r\n                Revenue\r\n            </div>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n            <div onClick={() => updatePage(\"vote_average.desc\")}\r\n                 className={`nav-link ${sort_by === \"vote_average.desc\" && \"active\"}`}>\r\n                Best average\r\n            </div>\r\n        </li>\r\n    </ul>)\r\n};\r\n\r\nexport default MovieTabs;","export const API_URL=\"https://api.themoviedb.org/3/discover/movie?api_key=\";\r\n\r\nexport const API_KEY=\"3f4ca4f3a9750da53450646ced312397\";\r\n\r\n","import React, {Component} from 'react';\nimport '../App.css';\n\nimport MovieItem from \"./MovieItem\";\nimport MovieTabs from \"./MovieTabs\";\n//import {moviesData} from \"../movieData\";\nimport {API_URL, API_KEY} from \"../utils/api\";\n\n\nclass App extends Component {\n    state = {\n        movies: [],\n        willWatch: [],\n        sort_by: 'popularity.desc',\n    };\n\n    componentDidMount() {\n        this.getMovies();\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.sort_by !== this.state.sort_by) this.getMovies();\n    };\n\n    getMovies = () => {\n        fetch(`${API_URL}${API_KEY}&sort_by=${this.state.sort_by}`)\n            .then(data => data.json())\n            .then(data => this.setState({movies: data.results}))\n\n    };\n    // likeMovie = () => {\n    //     this.setState((prevState, props) => {\n    //         return {like: !prevState.like}\n    //     });\n    // };\n\n    deleteMovie = movie => {\n        this.setState((prevState, props) => {\n            return {movies: prevState.movies.filter(item => item.id !== movie.id)}\n        })\n    };\n\n    addMovieWish = movie => {\n        this.setState((prevState, props) => {\n            return {willWatch: [...prevState.willWatch, movie]}\n        });\n    };\n\n    deleteMovieFromWish = movie => {\n        this.setState((prevState, props) => {\n            return {willWatch: prevState.willWatch.filter(item => item.id !== movie.id)}\n        })\n    };\n\n    updatePage = value => {\n        this.setState({sort_by: value})\n    };\n\n    render() {\n        const {movies, willWatch, sort_by} = this.state;\n\n        return (\n            <div className=\"container\">\n                <div className=\"row mt-4\">\n                    <div className=\"col-9\">\n                        <div className=\"row mb-4\">\n                            <div className=\"col-12\">\n                                <MovieTabs\n                                    sort_by={sort_by}\n                                    updatePage={this.updatePage}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            {movies.map(movie =>\n                                <div className=\"col-6 mb-4\" key={movie.id}>\n                                    <MovieItem\n                                        movie={movie}\n                                        addMovieWish={this.addMovieWish}\n                                        deleteMovieFromWish={this.deleteMovieFromWish}\n                                        overview={movie.overview}\n                                        title={movie.title}\n                                        src={movie.poster_path || movie.backdrop_path}\n                                        vote_average={movie.vote_average}\n                                        deleteMovie={this.deleteMovie}\n                                    />\n                                </div>)}\n                        </div>\n                    </div>\n                    <div className=\"col-3\">\n                        <p>Will Watch: {willWatch.length}</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.scss';\nimport App from './components/App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}